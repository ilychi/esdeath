name: Loon to Surge Module Conversion

on:
  repository_dispatch:
    types: [trigger-convert]
  workflow_dispatch:

# 并发控制，避免重复转换
concurrency:
  group: convert-workflow
  cancel-in-progress: false  # 不取消正在进行的任务

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101
    steps:
      # 添加等待检查，确保前序工作流完成
      - name: Wait for prerequisites
        run: |
          echo "Starting conversion workflow..."
          sleep 5  # 给予短暂延迟确保资源就绪
          
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq netcat-openbsd

      - name: Wait for Docker service to be ready
        run: |
          echo "Waiting for Docker service to be ready..."
          for i in {1..10}; do
            nc -z localhost 9101 && break
            sleep 10
          done

      - name: Download README.md
        run: |
          curl -s -o README.md https://raw.githubusercontent.com/luestr/ProxyResource/main/README.md

      - name: Extract .plugin URLs
        run: |
          echo "Extracting plugin URLs from README.md..."
          # 提取所有包含 plugin= 参数的链接
          grep -oP 'https://www\.nsloon\.com/openloon/import\?plugin=[^"]+' README.md > nsloon_urls.txt
          
          # 从每个链接中提取实际的插件URL
          > plugin_urls.txt
          while IFS= read -r line; do
            # 提取 plugin= 参数的值
            plugin_url=$(echo "$line" | grep -oP '(?<=plugin=)[^"]+')
            if [[ -n "$plugin_url" ]]; then
              echo "$plugin_url" >> plugin_urls.txt
              echo "Extracted: $plugin_url"
            fi
          done < nsloon_urls.txt

          # Add fmz200's blockAds plugin with custom name
          echo "https://raw.githubusercontent.com/fmz200/wool_scripts/main/Loon/plugin/blockAds.plugin?rename=Remove_ads_by_fmz" >> plugin_urls.txt
          echo "Added fmz200 plugin to list"
          
          # 统计提取的插件数量
          total_count=$(wc -l < plugin_urls.txt)
          echo "Total plugins extracted: $total_count"

      - name: Prepare Plugin Metadata
        id: prepare_metadata
        run: |
          echo "Preparing plugin metadata..."
          # 定义分类变量
          CAT_CHECKIN="✅ Checkin"
          CAT_TOOLS="🔨 Tools"
          CAT_ADBLOCK="🚫 AD Block"
          
          # 从 README.md 提取分类并建立映射关系
          declare -A category_map
          current_category=""

          while IFS= read -r line; do
            # 检查表格中的分类标记
            if [[ $line == *"<strong>签到插件</strong>"* ]]; then
              current_category="$CAT_CHECKIN"
              echo "Found category: 签到插件 -> $current_category"
            elif [[ $line == *"<strong>功能插件</strong>"* ]]; then
              current_category="$CAT_TOOLS"
              echo "Found category: 功能插件 -> $current_category"
            elif [[ $line == *"<strong>去广告插件</strong>"* ]]; then
              current_category="$CAT_ADBLOCK"
              echo "Found category: 去广告插件 -> $current_category"
            elif [[ $line == *"<strong>自签插件</strong>"* ]]; then
              # 自签插件也归类为去广告
              current_category="$CAT_ADBLOCK"
              echo "Found category: 自签插件 -> $current_category"
            elif [[ $line =~ href=\"https://www\.nsloon\.com/openloon/import\?plugin= && -n "$current_category" ]]; then
              # 提取插件URL
              plugin_url=$(echo "$line" | grep -oP '(?<=plugin=)[^"]+')
              if [[ -n "$plugin_url" ]]; then
                 # 提取基础URL (去掉可能的rename参数)
                 base_url=$(echo "$plugin_url" | cut -d'?' -f1)
                 if [[ -n "$base_url" ]]; then
                    category_map["$base_url"]="$current_category"
                    echo "Mapped: $base_url -> $current_category"
                 fi
              fi
            fi
          done < README.md
          echo "Finished reading README for categories."

          # 处理所有插件，确定名称和最终分类
          plugin_metadata='[]' # Initialize as empty JSON array

          while IFS= read -r plugin_full_url; do
            echo "Processing URL: $plugin_full_url"
            # Extract custom name and base url
            if [[ "$plugin_full_url" == *"?rename="* ]]; then
              plugin_name=$(echo "$plugin_full_url" | grep -oP '(?<=\?rename=)[^&]+')
              base_url=$(echo "$plugin_full_url" | cut -d'?' -f1)
              echo "  Custom name found: $plugin_name, Base URL: $base_url"
            else
              plugin_name=$(basename "$plugin_full_url" .plugin)
              base_url="$plugin_full_url"
              echo "  Default name: $plugin_name, Base URL: $base_url"
            fi

            # 确定分类 (优先使用映射，否则使用关键字)
            if [[ -n "${category_map[$base_url]}" ]]; then
              category="${category_map[$base_url]}"
              echo "  Using mapped category: $category"
            else
              echo "  No mapped category found for $base_url. Using fallback."
              # 转换为小写进行匹配
              combined_lower=$(echo "$plugin_full_url$plugin_name" | tr '[:upper:]' '[:lower:]')
              # 广告拦截类
              if [[ "$combined_lower" =~ (remove.*ads|ads.*remove|ad.*block|block.*ad|广告|净化|advertis|anti.?ad|remove_watermark|ssl_unpinning|filter|clean|purify|privacy|隐私|blocker|去广告|adguard|拦截|intercept) ]]; then
                category="$CAT_ADBLOCK"
              # 签到类
              elif [[ "$combined_lower" =~ (checkin|sign|签到|dailybonus|bonus|signin|打卡|登录奖励|每日签到|daily.?reward) ]]; then
                category="$CAT_CHECKIN"
              # 功能增强类
              elif [[ "$combined_lower" =~ (unlock|解锁|enhance|增强|功能|feature|redirect|转发|utility|mount|挂载|translation|repair|external_links|query|detection|auto_join) ]]; then
                category="$CAT_TOOLS"
              # 默认为工具类
              else
                category="$CAT_TOOLS"
              fi
              echo "  Fallback category determined: $category"
            fi

            # 将信息添加到JSON数组 (确保正确转义)
            json_entry=$(jq -n --arg url "$plugin_full_url" --arg name "$plugin_name" --arg category "$category" '{url: $url, name: $name, category: $category}')
            plugin_metadata=$(echo "$plugin_metadata" | jq --argjson entry "$json_entry" '. + [$entry]')

          done < plugin_urls.txt

          # 保存元数据到JSON文件
          echo "Final metadata JSON: $plugin_metadata"
          echo "$plugin_metadata" > plugin_metadata.json
          echo "Plugin metadata saved to plugin_metadata.json"

      - name: Download Netease Cloud Music Ad Removal Module
        run: |
          # 网易云模块单独处理，不使用上述元数据
          mkdir -p Surge/Modules
          encoded_name=$(echo "NetEase Music AdBlock" | jq -sRr @uri)
          encoded_desc=$(echo "Ad removal for NetEase Music" | jq -sRr @uri)
          encoded_category=$(echo "🚫 AD Block" | jq -sRr @uri)
          download_url="http://localhost:9101/file/_start_/https://raw.githubusercontent.com/Keywos/rule/main/script/wy/wy.sgmodule/_end_/Netease_Music_AdBlock.sgmodule?type=surge-module&target=surge-module&del=true&n=${encoded_name}&y=${encoded_desc}&category=${encoded_category}&jqEnabled=true"

          echo "Downloading Netease Music AdBlock module via ScriptHub"
          curl -A "script-hub/1.0.0" -L -o "Surge/Modules/Netease_Music_AdBlock.sgmodule" "$download_url" || echo "Failed to download Netease_Music_AdBlock.sgmodule"

      - name: Process Loon plugins to Surge modules
        run: |
          echo "Processing Loon plugins..."
          mkdir -p Surge/Modules

          # 读取之前生成的元数据文件
          jq -c '.[]' plugin_metadata.json | while IFS= read -r entry; do
              plugin_full_url=$(echo "$entry" | jq -r '.url')
              plugin_name=$(echo "$entry" | jq -r '.name')
              category=$(echo "$entry" | jq -r '.category')

              echo "Processing $plugin_name ($category) from $plugin_full_url"

              encoded_category=$(echo "$category" | jq -sRr @uri)
              encoded_plugin_name=$(echo "$plugin_name" | jq -sRr @uri)

              # 构建下载URL (Loon -> Surge)
              # 注意：这里的 source URL ($plugin_full_url) 可能是包含 ?rename= 的完整URL
              # ScriptHub 应该能正确处理这种情况，因为它会解析 _start_ 和 _end_ 之间的内容作为源URL
              download_url="http://localhost:9101/file/_start_/${plugin_full_url}/_end_/${encoded_plugin_name}.sgmodule?type=loon-plugin&target=surge-module&sni=%20%2C%20&del=true&pm=REJECT&category=${encoded_category}&jqEnabled=true"

              echo "  Download URL: $download_url"
              curl -A "script-hub/1.0.0" -L -o "Surge/Modules/${plugin_name}.sgmodule" "$download_url" || echo "  Failed to download ${plugin_name}.sgmodule"
          done
          echo "Finished processing Loon plugins."

      - name: Find and replace external JS resources
        continue-on-error: true  # 确保步骤在部分失败时继续执行
        shell: bash
        run: |
          set -e
          base_js_url="https://github.com/lucking7/esdeath/raw/main/Surge/Scripts"
          mirror_key="github.com/lucking7/esdeath"  # 排除已镜像的文件
          mkdir -p Surge/Scripts
          
          # 检查是否有生成的 sgmodule 文件
          if [ ! -d "Surge/Modules" ] || [ -z "$(ls -A Surge/Modules/*.sgmodule 2>/dev/null)" ]; then
            echo "No sgmodule files found to process"
            exit 0
          fi
          
          echo "Generated sgmodule files:"
          ls -la Surge/Modules/*.sgmodule
          
          # 提取所有 JavaScript URL - 使用更精确的正则表达式
          echo "Searching for JS URLs..."
          
          find Surge/Modules -name "*.sgmodule" \
            -exec grep -hoE 'script-path\s*=\s*https?://[^[:space:],"]+\.js[^[:space:],"]*' {} \; 2>/dev/null \
            | sed -E 's/^script-path\s*=\s*//' \
            | sort -u > external-js-raw.txt || touch external-js-raw.txt
          
          echo "Found JavaScript URLs:"
          cat external-js-raw.txt || echo "No JS URLs found"
          
          # 过滤掉已经指向镜像的 URL
          if [ -s external-js-raw.txt ]; then
            grep -v "$mirror_key" external-js-raw.txt \
              | grep -v "$base_js_url" > external-js.txt \
              || touch external-js.txt
          else
            touch external-js.txt
          fi
          
          echo "External JS URLs to mirror:"
          cat external-js.txt || echo "No external JS URLs to mirror"

          # 如果没有需要镜像的 JS 文件，直接退出
          if [ ! -s external-js.txt ]; then
            echo "No external JS links found to mirror."
            rm -f external-js.txt external-js-raw.txt
            exit 0
          fi

          # 下载并镜像 JS 文件
          echo "Processing external JS files:"
          failed_downloads=0
          successful_downloads=0
          
          while IFS= read -r url; do
            [ -z "$url" ] && continue
            
            # 提取文件名，处理可能的查询参数
            filename=$(basename "${url%%[\?#]*}")
            
            # 确保文件名以 .js 结尾
            if [[ ! "$filename" =~ \.js$ ]]; then
              filename="${filename}.js"
            fi
            
            local_js_path="Surge/Scripts/$filename"
            echo "Mirroring: $url → $local_js_path"
            
            # 下载文件 - 添加超时控制和更详细的错误处理
            if curl -Ls --connect-timeout 30 --max-time 60 \
                    -A "script-hub/1.0.0" \
                    "$url" -o "$local_js_path"; then
              
              # 检查下载的文件是否为空或过小
              if [ -s "$local_js_path" ] && [ "$(stat -c%s "$local_js_path" 2>/dev/null || stat -f%z "$local_js_path")" -gt 10 ]; then
                echo "✓ Successfully downloaded $filename ($(stat -c%s "$local_js_path" 2>/dev/null || stat -f%z "$local_js_path") bytes)"
                
                # 在所有 sgmodule 文件中替换链接 - 使用更精确的替换
                mirror_url="$base_js_url/$filename"
                find Surge/Modules -name "*.sgmodule" -type f \
                  -exec perl -pi -e "s,\Q${url}\E,${mirror_url},g" {} \; 2>/dev/null || \
                  find Surge/Modules -name "*.sgmodule" -type f \
                    -exec sed -i "s|$url|$mirror_url|g" {} \;
                
                echo "✓ Updated links: $url → $mirror_url"
                ((successful_downloads++))
              else
                echo "✗ Downloaded file is empty or too small: $filename"
                rm -f "$local_js_path"
                ((failed_downloads++))
              fi
            else
              echo "✗ Failed to download: $url"
              ((failed_downloads++))
            fi
            
            # 添加短暂延迟，避免请求过于频繁
            sleep 0.5
          done < external-js.txt
          
          echo ""
          echo "📊 Processing Summary:"
          echo "  ✓ Successful downloads: $successful_downloads"
          echo "  ✗ Failed downloads: $failed_downloads"
          echo "  📁 Total JS files in Surge/Scripts: $(ls -1 Surge/Scripts/*.js 2>/dev/null | wc -l)"
          
          # 清理临时文件
          rm -f external-js.txt external-js-raw.txt
          
          # 如果有太多失败，给出警告
          if [ $failed_downloads -gt 0 ] && [ $successful_downloads -eq 0 ]; then
            echo "⚠️  Warning: All JS downloads failed. Please check network connectivity."
          elif [ $failed_downloads -gt 5 ]; then
            echo "⚠️  Warning: High number of failed downloads ($failed_downloads). Some modules may not work properly."
          fi

      - name: Add ruleset to fmz200's module
        run: |
          fmz_module="Surge/Modules/Remove_ads_by_fmz.sgmodule"
          if [ -f "$fmz_module" ]; then
            echo "Adding ruleset to $fmz_module"
            
            # 检查文件中是否已有[Rule]部分
            if grep -q "\[Rule\]" "$fmz_module"; then
              # 在[Rule]部分后添加规则集
              sed -i '/\[Rule\]/a RULE-SET,https://ruleset.chichi.sh/Rulesets/reject/reject_fmz200.list ,REJECT,pre-matching,extended-matching,no-resolve' "$fmz_module"
              echo "Added ruleset after existing [Rule] section"
            else
              # 如果没有[Rule]部分，添加新的部分
              echo -e "\n[Rule]\nRULE-SET,https://ruleset.chichi.sh/Rulesets/reject/reject_fmz200.list ,REJECT,pre-matching,extended-matching,no-resolve" >> "$fmz_module"
              echo "Added new [Rule] section with ruleset"
            fi
          else
            echo "Warning: $fmz_module not found"
          fi

      - name: Commit and push changes
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          # 检查是否有文件需要提交
          echo "🔍 Checking for files to commit..."
          
          if [ ! -d "Surge/Modules" ] && [ ! -d "Surge/Scripts" ]; then
            echo "📭 No Surge directories found to commit."
            exit 0
          fi
          
          # 暂存需要管控的文件
          echo "📦 Staging files..."
          find Surge/Modules -name "*.sgmodule" -exec git add {} + 2>/dev/null || true
          find Surge/Scripts -name "*.js" -exec git add {} + 2>/dev/null || true
          
          # 检查暂存区是否为空
          if git diff --cached --quiet; then
            echo "📝 No changes to commit."
            exit 0
          fi
          
          # 显示将要提交的变化
          echo "📋 Changes to be committed:"
          git diff --cached --name-status
          
          echo ""
          echo "📊 File statistics:"
          sgmodule_count=$(git diff --cached --name-only | grep "\.sgmodule$" | wc -l || echo "0")
          js_count=$(git diff --cached --name-only | grep "\.js$" | wc -l || echo "0")
          echo "  📄 SGModule files: $sgmodule_count"
          echo "  📜 JavaScript files: $js_count"
          
          # 同步远端变化
          echo "🔄 Syncing with remote..."
          git fetch origin
          
          if git diff --quiet HEAD origin/main; then
            echo "✅ Local branch is up to date with origin/main"
          else
            echo "⬇️  Pulling latest changes from origin..."
            git pull --rebase origin main
            
            # rebase 后重新添加文件
            echo "🔄 Re-staging files after rebase..."
            find Surge/Modules -name "*.sgmodule" -exec git add {} + 2>/dev/null || true
            find Surge/Scripts -name "*.js" -exec git add {} + 2>/dev/null || true
            
            # rebase 后再次检查
            if git diff --cached --quiet; then
              echo "📝 No changes to commit after rebase."
              exit 0
            fi
          fi
          
          # 提交变化
          commit_msg="🔄 Update sgmodule files with GitHub-hosted JS resources - $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
          echo "💾 Committing changes..."
          git commit -m "$commit_msg"
          
          # 安全推送：处理可能的远程更改
          echo "⬆️  Pushing changes to remote..."
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if git push; then
              echo "✅ Successfully pushed changes to remote!"
              break
            else
              retry_count=$((retry_count + 1))
              echo "❌ Push failed (attempt $retry_count/$max_retries)"
              
              if [ $retry_count -lt $max_retries ]; then
                echo "🔄 Syncing remote changes and retrying..."
                git pull --rebase || {
                  echo "⚠️  Rebase failed, using merge strategy..."
                  git pull --no-rebase
                }
                sleep 2  # 短暂延迟
              else
                echo "💥 Reached maximum retry attempts, push failed!"
                echo "🔍 Current git status:"
                git status --porcelain
                exit 1
              fi
            fi
          done
          
          echo ""
          echo "🎉 Conversion workflow completed successfully!"
          echo "📊 Final summary:"
          echo "  📁 Repository: $(git remote get-url origin)"
          echo "  🏷️  Latest commit: $(git rev-parse --short HEAD)"
          echo "  📅 Timestamp: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S CST')"

      - name: Trigger Merge Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: trigger-merge
