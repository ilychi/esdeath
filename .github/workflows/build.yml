name: Build & Deploy Web UI
on:
  repository_dispatch:
    types: [trigger-deploy]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"  # 每天自动构建
  push:
    branches: [ main ]
    paths:
      - 'Surge/**'
      - 'GeoIP/**'
      - 'Chores/**'
      - 'Source/**'
      - 'Dial/**'
      - 'package.json'
      - 'tsconfig.json'

# 并发控制，避免重复构建
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 获取当前日期
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "year=$(date +'%Y')" >> $GITHUB_OUTPUT
          echo "month=$(date +'%m')" >> $GITHUB_OUTPUT
          echo "day=$(date +'%d')" >> $GITHUB_OUTPUT
          echo "hour=$(date +'%H')" >> $GITHUB_OUTPUT
          echo "minute=$(date +'%M')" >> $GITHUB_OUTPUT
          echo "second=$(date +'%S')" >> $GITHUB_OUTPUT
      
      - name: 恢复缓存
        uses: actions/cache/restore@v4
        id: cache-restore
        with:
          path: |
            .cache
          key: ${{ runner.os }}-v1-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:${{ steps.date.outputs.second }}
          # 如果源文件发生变化但包未变化，则从先前的缓存重建
          restore-keys: |
            ${{ runner.os }}-v1-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }}
            ${{ runner.os }}-v1-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-
            ${{ runner.os }}-v1-${{ steps.date.outputs.year }}-
            ${{ runner.os }}-v1-

      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0
          run_install: false

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 创建RAM磁盘构建目录
        id: build_dir
        run: |
          # 创建RAM磁盘目录
          RAM_DIR="/dev/shm/esdeath_build"
          sudo mkdir -p $RAM_DIR
          sudo chmod 777 $RAM_DIR
          echo "临时构建目录: $RAM_DIR"
          echo "dir=$RAM_DIR" >> $GITHUB_OUTPUT

      - name: 安装依赖
        run: pnpm install
        
      - name: 构建
        run: pnpm run build
        env:
          TZ: 'Asia/Shanghai'
          CI: 'true'
          RAM_DIR: ${{ steps.build_dir.outputs.dir }}

      - name: 构建前检查
        run: |
          if [ ! -d ${{ steps.build_dir.outputs.dir }} ]; then
            echo "构建目录不存在"
            exit 1
          fi
          if [ ! "$(ls -A ${{ steps.build_dir.outputs.dir }})" ]; then
            echo "构建目录为空"
            exit 1
          fi
          if [ ! -f .BUILD_FINISHED ]; then
            echo "构建完成标记不存在"
            exit 1
          fi

      - name: 设置Pages
        uses: actions/configure-pages@v4

      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.build_dir.outputs.dir }}

      - name: 部署到GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: 保存缓存
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            .cache
          key: ${{ runner.os }}-v1-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:${{ steps.date.outputs.second }}

      - name: 发送构建通知
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ 成功' : '❌ 失败';
            const buildDuration = (new Date() - new Date('${{ steps.date.outputs.date }}')) / 1000;
            const deployUrl = '${{ steps.deployment.outputs.page_url }}' || '等待部署';
            
            // 如果是PR，添加评论
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 构建状态: ${status}
                
                - 构建时间: ${buildDuration.toFixed(2)}秒
                - 部署地址: ${deployUrl}
                
                *构建于 ${{ steps.date.outputs.date }}*`
              });
            } 
            // 如果是定时或手动触发，可以考虑创建issue或发送其他通知
