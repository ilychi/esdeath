name: 检查域名可用性
on:
  # 每周三自动运行
  schedule:
    - cron: "0 0 * * 3"
  # PR触发条件 - 当修改规则文件时触发
  pull_request:
    paths:
      - 'Dial/**/*.list'
      - 'Chores/ruleset/**/*.list'
      - 'Rulesets/**/*.list'
      - 'Surge/Modules/Rules/**/*.list'
  # 允许手动触发
  workflow_dispatch:

jobs:
  check-domains:
    name: 验证域名
    runs-on: ubuntu-latest
    
    steps:
      - name: 获取当前日期
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "year=$(date +'%Y')" >> $GITHUB_OUTPUT
          echo "month=$(date +'%m')" >> $GITHUB_OUTPUT
          echo "day=$(date +'%d')" >> $GITHUB_OUTPUT
          echo "hour=$(date +'%H')" >> $GITHUB_OUTPUT
          echo "minute=$(date +'%M')" >> $GITHUB_OUTPUT
          echo "second=$(date +'%S')" >> $GITHUB_OUTPUT
      
      - name: 恢复缓存
        uses: actions/cache/restore@v4
        id: cache-restore
        with:
          path: |
            .cache
          key: ${{ runner.os }}-domain-cache-v1-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:${{ steps.date.outputs.second }}
          restore-keys: |
            ${{ runner.os }}-domain-cache-v1-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }}
            ${{ runner.os }}-domain-cache-v1-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-
            ${{ runner.os }}-domain-cache-v1-${{ steps.date.outputs.year }}-
            ${{ runner.os }}-domain-cache-v1-
      
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 验证域名可用性
        id: domain-check
        run: |
          mkdir -p .cache
          node Chores/engineering/build/scripts/validate-domains.js
      
      - name: 保存缓存
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            .cache
          key: ${{ runner.os }}-domain-cache-v1-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:${{ steps.date.outputs.second }}
      
      - name: 创建问题（如果发现失效域名）
        if: steps.domain-check.outputs.has_dead_domains == 'true' && github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const deadDomains = JSON.parse(fs.readFileSync('.cache/dead-domains.json', 'utf8'));
            
            const issueTitle = `发现失效域名 - ${new Date().toISOString().split('T')[0]}`;
            const deadDomainsList = deadDomains.map(domain => `- \`${domain}\``).join('\n');
            
            const issueBody = `## 域名验证发现以下失效域名

${deadDomainsList}

这些域名已经无法解析，建议从规则集中移除或更新。
            
**自动生成于:** ${new Date().toISOString()}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['domain-validation', 'needs-triage']
            }); 

      # 如果是PR触发，将结果作为评论添加到PR中
      - name: 添加PR评论（如果发现失效域名）
        if: steps.domain-check.outputs.has_dead_domains == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const deadDomains = JSON.parse(fs.readFileSync('.cache/dead-domains.json', 'utf8'));
            
            const deadDomainsList = deadDomains.map(domain => `- \`${domain}\``).join('\n');
            
            const commentBody = `## 域名验证发现以下失效域名

${deadDomainsList}

这些域名已经无法解析，建议从规则集中移除或更新。
            
**自动验证于:** ${new Date().toISOString()}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            }); 
