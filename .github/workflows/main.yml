name: Main Build Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时执行一次
  workflow_dispatch:
    inputs:
      clearCache:
        description: '清理缓存'
        required: false
        type: boolean
        default: false
  repository_dispatch:
    types: [trigger-main-build]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  main_build:
    name: 主构建流程
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 120
    permissions:
      contents: write

    services:
      docker:
        image: xream/script-hub:latest
        ports:
          - 9100:9100
          - 9101:9101

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取当前日期
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "year=$(date +'%Y')" >> $GITHUB_OUTPUT
          echo "month=$(date +'%m')" >> $GITHUB_OUTPUT
          echo "day=$(date +'%d')" >> $GITHUB_OUTPUT
          echo "hour=$(date +'%H')" >> $GITHUB_OUTPUT
          echo "minute=$(date +'%M')" >> $GITHUB_OUTPUT
          echo "second=$(date +'%S')" >> $GITHUB_OUTPUT

      - name: 恢复缓存
        uses: actions/cache/restore@v4
        id: cache-restore
        with:
          path: |
            .cache
            .cache/*.db
            .cache/*.db-wal
            .cache/*.db-shm
          key: ${{ runner.os }}-build-cache-v4-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:${{ steps.date.outputs.second }}
          restore-keys: |
            ${{ runner.os }}-build-cache-v4-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:
            ${{ runner.os }}-build-cache-v4-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:
            ${{ runner.os }}-build-cache-v4-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }}
            ${{ runner.os }}-build-cache-v4-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-
            ${{ runner.os }}-build-cache-v4-${{ steps.date.outputs.year }}-
            ${{ runner.os }}-build-cache-v4-

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安装依赖
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y curl jq netcat-openbsd

      - name: 同步规则源
        if: github.event_name == 'schedule' || github.event_name == 'repository_dispatch'
        run: |
          echo "开始同步规则源..."
          npm run sync
        env:
          TZ: 'Asia/Shanghai'

      - name: 等待 Docker 服务就绪
        run: |
          echo "等待 Docker 服务就绪..."
          for i in {1..10}; do
            nc -z localhost 9101 && break
            sleep 10
          done

      - name: 智能转换 Loon 插件
        run: |
          echo "开始智能 Loon 到 Surge 插件转换..."
          mkdir -p Surge/Modules Surge/Scripts .cache/plugin-checksums
          
          # 配置并发参数
          CONCURRENCY=${LOON_CONVERSION_CONCURRENCY:-3}
          echo "转换并发数: $CONCURRENCY"
          
          # 下载插件源列表
          curl -s -o README.md https://raw.githubusercontent.com/luestr/ProxyResource/main/README.md
          
          # 提取插件 URLs
          grep -oP 'https://www\.nsloon\.com/openloon/import\?plugin=[^"]+' README.md > nsloon_urls.txt
          > plugin_urls.txt
          while IFS= read -r line; do
            plugin_url=$(echo "$line" | grep -oP '(?<=plugin=)[^"]+')
            if [[ -n "$plugin_url" ]]; then
              echo "$plugin_url" >> plugin_urls.txt
            fi
          done < nsloon_urls.txt
          
          # 添加特殊插件
          echo "https://raw.githubusercontent.com/fmz200/wool_scripts/main/Loon/plugin/blockAds.plugin?rename=Remove_ads_by_fmz" >> plugin_urls.txt
          echo "https://github.com/Keywos/rule/raw/main/script/wy/wy.sgmodule?rename=Netease_Music_Purification" >> plugin_urls.txt
          
          # 直接下载已经是 Surge 格式的模块
          echo "下载原生 Surge 模块..."
          curl -L -o "Surge/Modules/Netease_Music_Purification.sgmodule" "https://github.com/Keywos/rule/raw/main/script/wy/wy.sgmodule" 2>/dev/null || echo "下载网易云音乐模块失败"
          
          # 从转换列表中移除已经是 sgmodule 的文件
          grep -v "\.sgmodule" plugin_urls.txt > plugin_urls_filtered.txt || true
          if [[ -f plugin_urls_filtered.txt ]]; then
            mv plugin_urls_filtered.txt plugin_urls.txt
          fi
          
          # 智能缓存策略
          plugins_hash=$(md5sum plugin_urls.txt | cut -d' ' -f1)
          cache_file=".cache/converted-modules-${plugins_hash}.tar.gz"
          manifest_file=".cache/conversion-manifest-${plugins_hash}.json"
          
          # 检查完整缓存
          if [[ -f "$cache_file" ]] && [[ -f "$manifest_file" ]]; then
            cached_count=$(jq length "$manifest_file" 2>/dev/null || echo "0")
            current_count=$(wc -l < plugin_urls.txt)
            
            if [[ "$cached_count" -eq "$current_count" ]]; then
              echo "发现完整插件缓存 ($cached_count 个插件)，解压使用..."
              tar -xzf "$cache_file" -C Surge/Modules/ 2>/dev/null
              echo "缓存解压完成，跳过转换"
              exit 0
            fi
          fi
          
          # 等待转换服务就绪
          echo "等待转换服务就绪..."
          max_wait=30
          wait_count=0
          while ! nc -z localhost 9101 && [ $wait_count -lt $max_wait ]; do
            sleep 3
            wait_count=$((wait_count + 1))
          done
          
          if ! nc -z localhost 9101; then
            echo "转换服务启动失败，尝试使用备用方案..."
            # 尝试使用最新可用缓存
            latest_cache=$(ls -t .cache/converted-modules-*.tar.gz 2>/dev/null | head -1)
            if [[ -f "$latest_cache" ]]; then
              echo "使用备用缓存: $latest_cache"
              tar -xzf "$latest_cache" -C Surge/Modules/ 2>/dev/null
              exit 0
            else
              echo "无可用备用方案，退出"
              exit 1
            fi
          fi
          
          # 创建转换任务函数
          convert_plugin() {
            local plugin_url="$1"
            local job_id="$2"
            
            # 解析插件信息
            if [[ "$plugin_url" == *"?rename="* ]]; then
              plugin_name=$(echo "$plugin_url" | grep -oP '(?<=rename=)[^&]*')
              base_url=$(echo "$plugin_url" | cut -d'?' -f1)
            else
              plugin_name=$(basename "$plugin_url" .plugin)
              base_url="$plugin_url"
            fi
            
            output_file="Surge/Modules/${plugin_name}.sgmodule"
            
            # 检查是否需要转换
            skip_conversion=false
            
            # 1. 检查文件是否存在且有效
            if [[ -f "$output_file" ]] && [[ $(wc -c < "$output_file") -gt 100 ]]; then
              # 2. 检查文件修改时间（24小时内）
              if [[ $(find "$output_file" -mmin -1440 2>/dev/null | wc -l) -gt 0 ]]; then
                skip_conversion=true
              else
                # 3. 检查源文件是否有更新（通过 HEAD 请求）
                if curl -s -I "$base_url" | grep -i "last-modified:" > "/tmp/remote_mod_${job_id}" 2>/dev/null; then
                  remote_mod=$(cat "/tmp/remote_mod_${job_id}" | cut -d' ' -f2-)
                  local_mod=$(stat -f "%Sm" -t "%a, %d %b %Y %T %Z" "$output_file" 2>/dev/null || echo "")
                  
                  if [[ "$remote_mod" == "$local_mod" ]]; then
                    skip_conversion=true
                  fi
                  rm -f "/tmp/remote_mod_${job_id}"
                fi
              fi
            fi
            
            if [[ "$skip_conversion" == "true" ]]; then
              echo "[并发$job_id] 跳过未更新的插件: $plugin_name"
              echo "$plugin_name:skipped" >> ".cache/conversion_results_${job_id}.txt"
              return 0
            fi
            
            echo "[并发$job_id] 转换插件: $plugin_name"
            
            # 执行转换
            encoded_name=$(echo "$plugin_name" | jq -sRr @uri)
            download_url="http://localhost:9101/api/v1/convert?type=loon-plugin&target=surge-module&url=$(echo "$base_url" | jq -sRr @uri)&filename=$encoded_name"
            
            # 对特定插件添加修复参数
            if [[ "$plugin_name" == "Remove_ads_by_fmz" ]]; then
              # 添加 evalUrlmodi 参数来修复转换后的 URL
              fix_script='body = body.replace(/http:\/\/127\.0\.0\.1:910[01]/g, "http://script.hub")'
              encoded_fix=$(echo "$fix_script" | jq -sRr @uri)
              download_url="${download_url}&evalScriptmodi=${encoded_fix}"
            fi
            
            if curl -A "script-hub/1.0.0" -L --connect-timeout 10 --max-time 30 -o "$output_file" "$download_url" 2>/dev/null; then
              if [[ -f "$output_file" ]] && [[ $(wc -c < "$output_file") -gt 100 ]]; then
                echo "[并发$job_id] 转换成功: $plugin_name ($(wc -c < "$output_file") bytes)"
                echo "$plugin_name:success" >> ".cache/conversion_results_${job_id}.txt"
              else
                echo "[并发$job_id] 转换失败 (文件无效): $plugin_name"
                rm -f "$output_file"
                echo "$plugin_name:failed_invalid" >> ".cache/conversion_results_${job_id}.txt"
              fi
            else
              echo "[并发$job_id] 转换失败 (网络错误): $plugin_name"
              echo "$plugin_name:failed_network" >> ".cache/conversion_results_${job_id}.txt"
            fi
          }
          
          # 导出函数供子进程使用
          export -f convert_plugin
          
          # 并发转换逻辑
          echo "开始并发转换插件 (并发数: $CONCURRENCY)..."
          
          # 清理旧的结果文件
          rm -f .cache/conversion_results_*.txt
          
          # 创建并发任务
          job_count=0
          while IFS= read -r plugin_url; do
            # 等待有空闲进程槽
            while [ $(jobs -r | wc -l) -ge $CONCURRENCY ]; do
              sleep 0.1
            done
            
            # 启动后台转换任务
            convert_plugin "$plugin_url" "$job_count" &
            job_count=$((job_count + 1))
            
            # 避免过快启动
            sleep 0.1
          done < plugin_urls.txt
          
          # 等待所有任务完成
          echo "等待所有转换任务完成..."
          wait
          
          # 合并结果
          echo "合并转换结果..."
          declare -A conversion_results
          successful_count=0
          failed_count=0
          skipped_count=0
          
          for result_file in .cache/conversion_results_*.txt; do
            if [[ -f "$result_file" ]]; then
              while IFS=':' read -r plugin_name status; do
                conversion_results["$plugin_name"]="$status"
                case "$status" in
                  "success")
                    successful_count=$((successful_count + 1))
                    ;;
                  "skipped")
                    skipped_count=$((skipped_count + 1))
                    ;;
                  *)
                    failed_count=$((failed_count + 1))
                    ;;
                esac
              done < "$result_file"
            fi
          done
          
          # 创建转换清单
          echo "{" > "$manifest_file"
          echo "  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"," >> "$manifest_file"
          echo "  \"total_plugins\": $(wc -l < plugin_urls.txt)," >> "$manifest_file"
          echo "  \"successful\": $successful_count," >> "$manifest_file"
          echo "  \"failed\": $failed_count," >> "$manifest_file"
          echo "  \"skipped\": $skipped_count," >> "$manifest_file"
          echo "  \"concurrency\": $CONCURRENCY," >> "$manifest_file"
          echo "  \"results\": {" >> "$manifest_file"
          
          first=true
          for plugin in "${!conversion_results[@]}"; do
            if [[ "$first" == "true" ]]; then
              first=false
            else
              echo "," >> "$manifest_file"
            fi
            echo "    \"$plugin\": \"${conversion_results[$plugin]}\"" >> "$manifest_file"
          done
          
          echo "" >> "$manifest_file"
          echo "  }" >> "$manifest_file"
          echo "}" >> "$manifest_file"
          
          # 创建缓存
          if [[ $successful_count -gt 0 ]] || [[ $skipped_count -gt 0 ]]; then
            echo "创建转换缓存..."
            tar -czf "$cache_file" -C Surge/Modules/ . 2>/dev/null || true
          fi
          
          # 输出统计
          total_plugins=$(wc -l < plugin_urls.txt)
          success_rate=$((((successful_count + skipped_count) * 100) / total_plugins))
          
          echo "============================================"
          echo "转换完成统计:"
          echo "  总插件数: $total_plugins"
          echo "  转换成功: $successful_count"
          echo "  跳过未更新: $skipped_count"
          echo "  转换失败: $failed_count"
          echo "  成功率: ${success_rate}%"
          echo "  并发数: $CONCURRENCY"
          echo "============================================"
          
          # 设置 GitHub Actions 输出
          echo "conversion_success_rate=$success_rate" >> $GITHUB_OUTPUT
          echo "converted_plugins=$successful_count" >> $GITHUB_OUTPUT
          echo "skipped_plugins=$skipped_count" >> $GITHUB_OUTPUT
          
          # 清理旧缓存（保留最新5个）
          ls -t .cache/converted-modules-*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
          ls -t .cache/conversion-manifest-*.json 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
          
          # 清理临时文件
          rm -f .cache/conversion_results_*.txt
        env:
          LOON_CONVERSION_CONCURRENCY: 5

      - name: 转换 QX 重写规则
        run: |
          echo "开始 QX 到 Surge 规则转换..."
          
          # 确保转换服务就绪
          if ! nc -z localhost 9101; then
            echo "转换服务未就绪，跳过 QX 转换"
            exit 0
          fi
          
          # 定义要转换的 QX 规则
          declare -A qx_rules=(
            ["MiniApp_Cleaner"]="https://github.com/fmz200/wool_scripts/raw/main/QuantumultX/rewrite/chongxie.txt"
          )
          
          # 转换 QX 规则
          for name in "${!qx_rules[@]}"; do
            url="${qx_rules[$name]}"
            output_file="Surge/Modules/${name}.sgmodule"
            
            echo "转换 QX 规则: $name"
            encoded_name=$(echo "$name" | jq -sRr @uri)
            
            # 使用 Script Hub 转换 QX 重写到 Surge 模块
            download_url="http://localhost:9101/file/_start_/${url}/_end_/${name}.sgmodule?type=qx-rewrite&target=surge-module&del=true"
            
            # 添加主动预防参数
            fix_script='body = body.replace(/http:\/\/127\.0\.0\.1:910[01]/g, "http://script.hub")'
            encoded_fix=$(echo "$fix_script" | jq -sRr @uri)
            download_url="${download_url}&evalScriptmodi=${encoded_fix}"
            
            if curl -A "script-hub/1.0.0" -L --connect-timeout 10 --max-time 30 -o "$output_file" "$download_url" 2>/dev/null; then
              echo "✅ 转换成功: $name"
              
              # 为 MiniApp_Cleaner 添加规则
              if [[ "$name" == "MiniApp_Cleaner" ]]; then
                echo "为 MiniApp_Cleaner 添加规则..."
                
                # 检查是否已有 [Rule] 部分
                if grep -q "^\[Rule\]" "$output_file"; then
                  # 在 [Rule] 部分后添加规则
                  sed -i '/^\[Rule\]/a RULE-SET,https://ruleset.chichi.sh/Rulesets/reject/reject_fmz200.list,REJECT,pre-matching,extended-matching,no-resolve' "$output_file"
                else
                  # 添加 [Rule] 部分和规则
                  echo -e "\n[Rule]\nRULE-SET,https://ruleset.chichi.sh/Rulesets/reject/reject_fmz200.list,REJECT,pre-matching,extended-matching,no-resolve" >> "$output_file"
                fi
              fi
            else
              echo "❌ 转换失败: $name"
            fi
          done
          
          echo "QX 规则转换完成"

      - name: 转换 Loon 参数到 Surge 格式
        run: |
          echo "开始转换 Loon 参数..."
          
          # 处理 Remove_ads_by_fmz 的参数
          if [[ -f "Surge/Modules/Remove_ads_by_fmz.sgmodule" ]]; then
            # 从原始 Loon 插件提取参数
            loon_url="https://raw.githubusercontent.com/fmz200/wool_scripts/main/Loon/plugin/blockAds.plugin"
            
            # 下载原始文件提取参数和脚本
            if curl -s -L "$loon_url" > /tmp/loon_plugin.txt 2>/dev/null; then
              echo "提取到 Loon 插件，开始转换..."
              
              # 清理现有的重复参数定义
              sed -i '/^#!arguments=/d' "Surge/Modules/Remove_ads_by_fmz.sgmodule"
              sed -i '/^#!arguments-desc=/d' "Surge/Modules/Remove_ads_by_fmz.sgmodule"
              
              # 提取参数并转换格式
              args=""
              args_desc=""
              
              # 提取参数部分
              sed -n '/^\[Argument\]/,/^\[/p' /tmp/loon_plugin.txt | grep -v '^\[' > /tmp/loon_args.txt
              
              while IFS= read -r line; do
                [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
                
                # 处理 switch 类型参数
                if [[ "$line" =~ ^([a-zA-Z0-9_]+)[[:space:]]*=[[:space:]]*switch,([^,]+),([^,]+),tag=(.*)$ ]]; then
                  name="${BASH_REMATCH[1]}"
                  default="${BASH_REMATCH[2]}"
                  desc="${BASH_REMATCH[4]%%,*}" # 移除desc部分
                  args="${args}${name}:${default},"
                  args_desc="${args_desc}${name}:${desc}\\n"
                # 处理 select 类型参数
                elif [[ "$line" =~ ^([a-zA-Z0-9_]+)=select,(.+),tag=([^,]+) ]]; then
                  name="${BASH_REMATCH[1]}"
                  options="${BASH_REMATCH[2]}"
                  desc="${BASH_REMATCH[3]%%,*}"
                  # 获取第一个选项作为默认值
                  default=$(echo "$options" | cut -d',' -f1 | tr -d '"')
                  args="${args}${name}:${default},"
                  args_desc="${args_desc}${name}:${desc}\\n"
                fi
              done < /tmp/loon_args.txt
              
              # 移除最后的逗号和换行
              args="${args%,}"
              args_desc="${args_desc%\\n}"
              
              # 创建临时文件
              cp "Surge/Modules/Remove_ads_by_fmz.sgmodule" "/tmp/sgmodule_temp.txt"
              
              # 在文件开头插入参数定义（仅一次）
              {
                echo "#!arguments=$args"
                echo "#!arguments-desc=$args_desc"
                echo ""
                cat "/tmp/sgmodule_temp.txt"
              } > "Surge/Modules/Remove_ads_by_fmz.sgmodule"
              
              echo "✅ 参数转换完成，共转换 $(echo "$args" | tr ',' '\n' | wc -l) 个参数"
              
              # 确保脚本使用参数占位符
              # Script Hub 转换应该已经处理了这部分，这里只是验证
              if grep -q '{{{[a-zA-Z0-9_]+}}}' "Surge/Modules/Remove_ads_by_fmz.sgmodule"; then
                echo "✅ 脚本已使用参数占位符"
              else
                echo "⚠️ 警告：脚本未使用参数占位符，参数控制可能无效"
              fi
              
              rm -f /tmp/loon_plugin.txt /tmp/loon_args.txt /tmp/sgmodule_temp.txt
            else
              echo "⚠️ 无法下载 Loon 插件，跳过参数转换"
            fi
          fi
          
          echo "参数转换步骤完成"

      - name: 合并 Surge 模块
        run: |
          echo "开始合并 Surge 模块..."
          mkdir -p Surge/Modules/Rules
          npm run merge

      - name: 验证规则完整性
        id: validate
        run: |
          echo "开始规则验证..."
          mkdir -p .cache
          
          echo "验证规则语法..."
          NODE_OPTIONS="--experimental-specifier-resolution=node" tsx Chores/engineering/build/scripts/validate-rule-syntax.ts || true
          
          echo "验证非法 TLD..."
          NODE_OPTIONS="--experimental-specifier-resolution=node" tsx Chores/engineering/build/scripts/validate-illegal-tld.ts || true
          
          echo "检测哈希冲突..."
          NODE_OPTIONS="--experimental-specifier-resolution=node" tsx Chores/engineering/build/scripts/validate-hash-collision.ts || true
          
          syntax_errors=0
          tld_errors=0
          hash_errors=0
          
          [ -f ".cache/syntax-errors.json" ] && syntax_errors=$(jq '.errors | length' .cache/syntax-errors.json 2>/dev/null || echo "0")
          [ -f ".cache/illegal-tlds.json" ] && tld_errors=$(jq length .cache/illegal-tlds.json 2>/dev/null || echo "0")
          [ -f ".cache/hash-collisions.json" ] && hash_errors=$(jq length .cache/hash-collisions.json 2>/dev/null || echo "0")
          
          total_errors=$((syntax_errors + tld_errors + hash_errors))
          
          echo "validation_errors_count=$total_errors" >> $GITHUB_OUTPUT
          echo "syntax_errors=$syntax_errors" >> $GITHUB_OUTPUT
          echo "tld_errors=$tld_errors" >> $GITHUB_OUTPUT
          echo "hash_errors=$hash_errors" >> $GITHUB_OUTPUT
          
          if [ "$total_errors" -gt 0 ]; then
            echo "has_validation_errors=true" >> $GITHUB_OUTPUT
            echo "发现 $total_errors 个验证错误"
            echo "  - 语法错误: $syntax_errors"
            echo "  - TLD 错误: $tld_errors"
            echo "  - 哈希冲突: $hash_errors"
            exit 1
          else
            echo "has_validation_errors=false" >> $GITHUB_OUTPUT
            echo "所有规则验证通过"
          fi

      - name: 提交更改
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add Surge/Modules/*.sgmodule 2>/dev/null || true
          git add Surge/Modules/Rules/*.list 2>/dev/null || true
          git add Surge/Scripts/*.js 2>/dev/null || true
          git add Surge/Rulesets/**/*.list 2>/dev/null || true
          git add Chores/ruleset/**/*.list 2>/dev/null || true
          
          if git diff --cached --quiet; then
            echo "没有文件需要提交"
          else
            sgmodule_count=$(find Surge/Modules -name "*.sgmodule" 2>/dev/null | wc -l || echo "0")
            ruleset_count=$(find Surge/Rulesets -name "*.list" 2>/dev/null | wc -l || echo "0")
            
            git commit -m "自动构建更新 - $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S') [模块${sgmodule_count}个] [规则${ruleset_count}个] [触发${{ github.event_name }}]"
            
            max_retries=3
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if git push; then
                echo "推送成功"
                break
              else
                echo "推送失败，尝试同步远程更改... (尝试 $((retry_count + 1))/$max_retries)"
                git pull --rebase || {
                  echo "Rebase 失败，使用 merge 策略"
                  git pull --no-rebase
                }
                retry_count=$((retry_count + 1))
                if [ $retry_count -eq $max_retries ]; then
                  echo "达到最大重试次数，推送失败"
                  exit 1
                fi
              fi
            done
          fi

      - name: 保存缓存
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            .cache
            .cache/*.db
            .cache/*.db-wal
            .cache/*.db-shm
          key: ${{ runner.os }}-build-cache-v4-${{ steps.date.outputs.year }}-${{ steps.date.outputs.month }}-${{ steps.date.outputs.day }} ${{ steps.date.outputs.hour }}:${{ steps.date.outputs.minute }}:${{ steps.date.outputs.second }}

      - name: 生成构建报告
        if: always()
        run: |
          echo "## 主构建流程报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 构建统计" >> $GITHUB_STEP_SUMMARY
          echo "- 执行时间: ${{ steps.date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
          echo "- 触发方式: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- 缓存状态: ${{ steps.cache-restore.outputs.cache-hit == 'true' && '命中' || '未命中' }}" >> $GITHUB_STEP_SUMMARY
          
          sgmodule_count=$(find Surge/Modules -name "*.sgmodule" 2>/dev/null | wc -l || echo "0")
          ruleset_count=$(find Surge/Rulesets -name "*.list" 2>/dev/null | wc -l || echo "0")
          echo "- 转换模块: $sgmodule_count 个" >> $GITHUB_STEP_SUMMARY
          echo "- 规则文件: $ruleset_count 个" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 验证结果" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.validate.outputs.has_validation_errors }}" == "true" ]; then
            echo "- 状态: 发现问题" >> $GITHUB_STEP_SUMMARY
            echo "- 语法错误: ${{ steps.validate.outputs.syntax_errors }} 个" >> $GITHUB_STEP_SUMMARY
            echo "- TLD 错误: ${{ steps.validate.outputs.tld_errors }} 个" >> $GITHUB_STEP_SUMMARY
            echo "- 哈希冲突: ${{ steps.validate.outputs.hash_errors }} 个" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 状态: 验证通过" >> $GITHUB_STEP_SUMMARY
            echo "- 总错误数: 0 个" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "提示: 域名活性检测需手动触发 check-domain.yml 工作流" >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: main_build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    name: 部署
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 创建 RAM 磁盘构建目录
        id: build_dir
        run: |
          # 创建RAM磁盘目录
          RAM_DIR="/dev/shm/esdeath_build"
          sudo mkdir -p $RAM_DIR
          sudo chmod 777 $RAM_DIR
          echo "临时构建目录: $RAM_DIR"
          echo "dir=$RAM_DIR" >> $GITHUB_OUTPUT

      - name: 构建网站
        run: |
          echo "开始构建网站..."
          
          # 设置环境变量指定 RAM 磁盘为输出目录
          export OUTPUT_DIR="${{ steps.build_dir.outputs.dir }}"
          export RAM_DIR="${{ steps.build_dir.outputs.dir }}"
          export CI=true
          
          # 执行构建命令
          npm run build
          
          # 验证构建结果
          if [ ! -d "$OUTPUT_DIR" ] || [ -z "$(ls -A $OUTPUT_DIR)" ]; then
            echo "❌ 构建失败：输出目录为空"
            exit 1
          fi
          
          # 如果构建输出到了 public 目录而不是 RAM 磁盘，则复制过去
          if [ -d "public" ] && [ "$OUTPUT_DIR" != "$(pwd)/public" ]; then
            echo "复制构建结果到 RAM 磁盘..."
            cp -r public/* "$OUTPUT_DIR/" || true
          fi
          
          # 确保有 index.html
          if [ ! -f "$OUTPUT_DIR/index.html" ]; then
            echo "❌ 构建失败：缺少 index.html"
            exit 1
          fi
          
          # 输出构建统计
          echo "✅ 网站构建成功！"
          echo "📊 构建统计："
          echo "  - 规则文件: $(find $OUTPUT_DIR/Rulesets -name "*.list" 2>/dev/null | wc -l || echo "0") 个"
          echo "  - 模块文件: $(find $OUTPUT_DIR/Modules -name "*.sgmodule" 2>/dev/null | wc -l || echo "0") 个"
          echo "  - 脚本文件: $(find $OUTPUT_DIR/Scripts -name "*.js" 2>/dev/null | wc -l || echo "0") 个"
          echo "  - 总大小: $(du -sh $OUTPUT_DIR | cut -f1)"
          
          # 生成部署信息
          echo "部署时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" > $OUTPUT_DIR/deploy-info.txt
          echo "Git Commit: ${{ github.sha }}" >> $OUTPUT_DIR/deploy-info.txt
          echo "构建目录: $OUTPUT_DIR" >> $OUTPUT_DIR/deploy-info.txt
        env:
          TZ: 'Asia/Shanghai'
          CI: 'true'

      - name: 构建后检查
        run: |
          OUTPUT_DIR="${{ steps.build_dir.outputs.dir }}"
          
          if [ ! -d "$OUTPUT_DIR" ]; then
            echo "❌ 构建目录不存在"
            exit 1
          fi
          
          if [ ! -f "$OUTPUT_DIR/index.html" ]; then
            echo "❌ index.html 不存在"
            exit 1
          fi
          
          if [ -z "$(ls -A $OUTPUT_DIR)" ]; then
            echo "❌ 构建目录为空"
            exit 1
          fi
          
          echo "✅ 构建检查通过"
          echo "📁 构建目录内容："
          ls -la $OUTPUT_DIR
          
          # 显示 index.html 的前几行确认是正确的网站
          echo ""
          echo "📄 index.html 预览："
          head -n 20 $OUTPUT_DIR/index.html || true

      - name: 设置 GitHub Pages
        uses: actions/configure-pages@v5

      - name: 上传部署文件
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.build_dir.outputs.dir }}

      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: 部署成功通知
        if: success()
        run: |
          echo "✅ 部署成功！" >> $GITHUB_STEP_SUMMARY
          echo "🌐 访问地址: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 部署时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "📦 Git Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
